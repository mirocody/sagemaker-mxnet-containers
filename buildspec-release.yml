version: 0.2

env:
  variables:
    FRAMEWORK_FULL_VERSION: '1.3.0'
    FRAMEWORK_SHORT_VERSION: '1.3'
    AWS_DEFAULT_REGION: 'us-west-2'
    ECR_REPO: 'sagemaker-mxnet'
    GITHUB_REPO: 'sagemaker-mxnet-container'
    SETUP_CMDS: '#!/bin/bash\npip install --upgrade pip\npip install -U -e .\npip install -U -e .[test]'
    SETUP_FILE: 'setup_cmds.sh'
    GPU_INSTANCE_TYPE: 'p2.xlarge'


phases:
  pre_build:
    commands:
      - start-dockerd

      - ACCOUNT=$(aws sts get-caller-identity --query 'Account' --output text)
      - BUILD_DIR="docker/$FRAMEWORK_FULL_VERSION/final"

      # keep ssh connection alive when communicating with remote ec2 server during integ test
      # largest connection idle time allowed: 10 seconds * 360 attempts = 60 minutes
      - echo '  ServerAliveInterval 10' >> ~/.ssh/config
      - echo '  ServerAliveCountMax 360' >> ~/.ssh/config

  build:
    commands:
      # prepare the release (update versions, changelog etc.)
      - git-release --prepare

      - tox -e flake8

      # run unit tests
      - tox -e py27,py36 test/unit

      # Create pip archive (tar_name will be something like: sagemaker_mxnet_container-2.0.tar.gz)
      - python3 setup.py sdist
      - tar_name=$(ls dist)
      - cp dist/$tar_name $BUILD_DIR

      # build images
      - python3 scripts/build-all.py --version $FRAMEWORK_FULL_VERSION --account $ACCOUNT --repo $ECR_REPO

      # push docker images to ECR
      - python3 scripts/publish-all.py --version $FRAMEWORK_FULL_VERSION --account $ACCOUNT --repo $ECR_REPO

      # TODO: make sure both Python versions are run
      # run cpu integration tests
      - tox -e py36 test/integration/local --py-version 3 --processor cpu --framework-version $FRAMEWORK_FULL_VERSION --region $AWS_DEFAULT_REGION --docker-base-name $ECR_REPO

      # launch remote gpu instance
      - create-key-pair
      - launch-ec2-instance --instance-type $GPU_INSTANCE_TYPE --ami-name dlami-ubuntu

      # TODO: make sure both Python versions are run
      # run gpu integration tests
      - printf "$SETUP_CMDS" > $SETUP_FILE
      - cmd="tox -e py36 test/integration/local --region $AWS_DEFAULT_REGION --docker-base-name $PREPROD_IMAGE --framework-version $FRAMEWORK_VERSION --processor gpu"
      - remote-test --github-repo $GITHUB_REPO --test-cmd "$cmd" --setup-file $SETUP_FILE

      # TODO: make sure both Python versions are run
      # run cpu sagemaker tests
      - tox -e py36 -- test/integration/sagemaker --region $AWS_DEFAULT_REGION --docker-base-name $ECR_REPO --aws-id $ACCOUNT --framework-version $FRAMEWORK_FULL_VERSION --processor cpu

      # TODO: make sure both Python versions are run
      # run gpu sagemaker tests
      - tox -e py36 test/integration/sagemaker --region $AWS_DEFAULT_REGION --docker-base-name $ECR_REPO --aws-id $ACCOUNT --framework-version $FRAMEWORK_FULL_VERSION --processor gpu

      # TODO: make sure all tests are run
      # write deployment details to file
      - |
        echo '[{
          "repository": "'$ECR_REPO'",
          "tags": [{
            "source": "1.3.0-cpu-py2",
            "dest": ["1.3.0-cpu-py2", "1.3-cpu-py2", "1.3.0-cpu-py2-'${CODEBUILD_BUILD_ID#*:}'"]
          },{
            "source": "1.3.0-gpu-py2",
            "dest": ["1.3.0-gpu-py2", "1.3-gpu-py2", "1.3.0-gpu-py2-'${CODEBUILD_BUILD_ID#*:}'"]
          },{
            "source": "1.3.0-cpu-py3",
            "dest": ["1.3.0-cpu-py3", "1.3-cpu-py3", "1.3.0-cpu-py3-'${CODEBUILD_BUILD_ID#*:}'"]
          },{
            "source": "1.3.0-gpu-py3",
            "dest": ["1.3.0-gpu-py3", "1.3-gpu-py3", "1.3.0-gpu-py3-'${CODEBUILD_BUILD_ID#*:}'"]
          }]
        }, {
          "test": [
            "tox -e py36 -- test/integration/sagemaker -n auto --region {region} --docker-base-name '$ECR_REPO' --aws-id '$ACCOUNT' --framework-version '$FRAMEWORK_FULL_VERSION' --processor cpu"
          ]
        }]' > deployments.json

      # publish the release to github
      - git-release --publish

    finally:
      # shut down remote gpu instance
      - cleanup-gpu-instances
      - cleanup-key-pairs

artifacts:
  files:
    - deployments.json
name: ARTIFACT_1
